import algebra.indicator_function
import analysis.special_functions.pow
import analysis.special_functions.complex.log

import rnd_var_one_symbol

open real set

open_locale big_operators

lemma le_div_of_pos {a b c d : ‚Ñù} :
  b * exp(d - c) ‚â§ a ‚Üí 0 < b ‚Üí exp(d - c) ‚â§ a / b :=
Œª H G, by {rw mul_comm at H, exact (le_div_iff G).mpr H}

lemma exp_tmp_lemma {a b c d : ‚Ñù} :
  a ‚â• b * exp(d - c) ‚Üí 0 < b ‚Üí 1 ‚â§ a / b * exp(c - d) :=
begin
  intros H G,
  have h3 : a/b ‚â• exp(d - c) ‚Üí a/b * exp(c - d) ‚â• exp(d - c) * exp(c - d), {
    intro H, apply mul_le_mul_of_nonneg_right, exact H, apply le_of_lt, exact exp_pos (c - d),
  },
  have h4 : a/b * exp(c - d) ‚â• exp(d - c) * exp(c - d) ‚Üí a/b * exp(c - d) ‚â• 1, {
    intro H,
    rw ‚Üê exp_add (d-c) (c-d) at H,
    norm_num at H,
    exact H,
  },
  apply h4,
  apply h3,
  exact le_div_of_pos H G,
end

lemma a_le_c {b : ‚Ñù ‚Üí ‚Ñù} {a c : ‚Ñù} :
  (‚àÄ s, a ‚â§ b s) ‚Üí (‚àÉ s, c = b s) ‚Üí (a ‚â§ c) :=
by finish

lemma mul_add_ge_of_ge {a b c d : ‚Ñù} :
  a ‚â• d ‚Üí a * b + c ‚â• d * b + c :=
begin
  intro H,
  norm_num at *,
  rw mul_le_mul_right, exact H,
  sorry
end

lemma zero_le_div_exp_pow {a b c d : ‚Ñù} :
  0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí 0 ‚â§ (a / b * exp(c))^d :=
begin
  intros ha hb,
  apply rpow_nonneg_of_nonneg,
  apply mul_nonneg, apply div_nonneg,
  exact ha, exact hb,
  apply le_of_lt, apply exp_pos,
end

noncomputable theory

/-- indicator function: if k ‚àà S then 1 else 0 -/
def Œ¶ {Œπ : Type} (S : set Œπ) (k : Œπ) : ‚Ñù :=
indicator S 1 k

lemma indicator_zero_of_not_one {Œπ : Type} {S : set Œπ} {k} :
  ¬¨ (Œ¶ S k = 1) ‚Üí (Œ¶ S k = 0) :=
Œª H, by {rw [Œ¶, indicator] at *, by_contradiction H1, finish}

variables {Œπ : Type} [fintype Œπ]

/-- if A ‚äÜ B then ‚àë k ‚àà A, f k < ‚àë k ‚àà B, f k-/
lemma sum_le_of_subset {A B : set Œπ} {f : Œπ ‚Üí ‚Ñù} :
  A ‚äÜ B ‚Üí ‚àë k, f k * (Œ¶ A k) ‚â§ ‚àë k, f k * (Œ¶ B k) :=
sorry

lemma add_ge_sum_union {A B : set Œπ} {f : Œπ ‚Üí ‚Ñù} :
  ‚àë k, f k * (Œ¶ A k) + ‚àë k, f k * (Œ¶ B k) ‚â• ‚àë k, f k * (Œ¶ (A‚à™B) k) :=
sorry

lemma in_self_or_in_compl {Œπ : Type} [fintype Œπ] [decidable_eq Œπ] {q : Œπ ‚Üí ‚Ñù} [rnd_var_1 q] {S : set Œπ} :
  ‚àë k, q k * Œ¶ S k = 1 - ‚àë k, q k * Œ¶ S·∂ú k :=
sorry

lemma gt_compl_le {Œπ : Type} {f g : Œπ ‚Üí ‚Ñù} :
  {k | f k > g k}·∂ú = {k | f k ‚â§ g k} :=
by {rw compl_def, simp}

lemma subset_abs {Œπ : Type} {f : Œπ ‚Üí ‚Ñù} {a : ‚Ñù} :
  { k:Œπ | f k ‚â• a } ‚äÜ { k:Œπ | abs(f k) ‚â• a } :=
sorry

/--
the smallest a equal to b. Multiplied by n.
is the smallest number equal to n * b.
-/
lemma mul_inf_eq_inf_mul {a b n : ‚Ñù} : 
  n * Inf { a | a = b } = Inf { a | a = n * b } :=
sorry

lemma mul_inf_eq_inf_mul_ex {Œπ : Type} [fintype Œπ] {a b n : ‚Ñù} {f : Œπ ‚Üí ‚Ñù} : 
  n * Inf { a | a = b } = Inf { a | a = n * b } :=
sorry

variables [decidable_eq Œπ] 

/-- expectation value of a function of a random variable -/
def Œº (q : Œπ ‚Üí ‚Ñù) [rnd_var_1 q] (f : Œπ ‚Üí ‚Ñù) :=
‚àë k, q k * f k

/-- variance of a function of a random variable -/
def Var (q : Œπ ‚Üí ‚Ñù) [rnd_var_1 q] (f : Œπ ‚Üí ‚Ñù) :=
(‚àë k, q k * (f k)^2) - (‚àë k, q k * f k)^2

/-- Pr(|f X - ùîº[f X]| ‚â• Œµ) ‚â§ Var(f X)/Œµ¬≤ -/
theorem Chebyshevs_ineq {X : Œπ ‚Üí ‚Ñù} [rnd_var_1 X] {f : Œπ ‚Üí ‚Ñù} {Œµ : ‚Ñù} :
  ‚àë k, X k * (Œ¶ {k | abs(f k - Œº X f) ‚â• Œµ} k) ‚â§ Var X f/Œµ^2 :=
begin
  -- Pr(|f X - ùîº[f X]| ‚â• Œµ)
  -- = Pr(k ‚àà {k | |f k - Œº X f| ‚â• Œµ})
  -- = ‚àë k, X k * (Œ¶ {k | |f k - Œº X f| ‚â• Œµ} k)
  sorry,
end